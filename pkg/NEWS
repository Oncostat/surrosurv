Changes in version 1.1.14 (2017-04-06)
- fixed issue in prediction intervals for mixed Poisson models

Changes in version 1.1.13 (2017-03-28)
- fixed issue in prediction intervals for adjusted copula models

Changes in version 1.1.12 (2017-03-02)
- loocv() now also returns the values of kTau and R2
  estimated in each (N-1) fold

Changes in version 1.1.10 (2017-02-27)
- fixed issues with loocv when few trials (added controls)
- added data 'gastadj'
- added twoStage parameter to surrosurv for Shih and Louis (1995) approach
  to copula estimation

Changes in version 1.1.4 (2016-12-06)
- added paper manuscript as vignette('surrosurv')

Changes in version 1.1 (2016-11-09)
- Poisson models can be fitted each separately

################################################################################

Changes in version 0.1.1 (2016-09-28)
- fixed examples for poissonize()

Changes in version 0.1.0 (First Complete version, 2016-09-27)
- new function loocv() (with print() and plot() functions)
  to compute leave-one-out cross-validation

################################################################################

Changes in version 0.0.15 (2016-09-23)
- new function ste() to compute the surrogate threshold effect
- plot.sussosurv() can now show prediction intervals and the STE

Changes in version 0.0.11 (2016-08-12)
- predict and plot for class sussosurv

Changes in version 0.0.10 (2016-08-01)
- kkt2 convergence criteria corrected from positive determinant
  to positive min eigenvalue

Changes in version 0.0.9 (2016-07-28)
- bugfix in Poisson method, which did not return results
  because of mispelled model name

Changes in version 0.0.7 (2016-07-25)
- the Kendall's tau for copulas is now initialized
  using the SurvCorr package (much faster)

Changes in version 0.0.6 (2016-07-22)
- added the function convals(), giving the values of the max abs gradient
  and the min eigenvalue of the variance-covariance matrix of the random treatment effects
- the function convergence() uses explicit computation provided by covals(),
  instead of using the function optimx in the package optimx